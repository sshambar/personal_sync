#!/bin/bash
# -*- mode:sh; sh-indentation:2 -*- vim:set ft=sh et sw=2 ts=2:
#
# media-sync v1.4 Media Sync
#
# Author: Scott Shambarger <devel@shambarger.net>
# Copyright (C) Scott Shambarger
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Media Sync manages rsync between a local and remote folder, and has
# options for both sending and receiving.
#
# To see options, run:
#
#   # media-sync help
#
# Environment overrides:
#   LOCAL_USER - user to run rsync as (default: media)
#
# Optional config/overrides (~/.media-sync.conf, or /etc/media-sync.conf):
#   LOCAL_USER - user to run rsync as (default: media)
#   LOCAL_DIR - local sync location (default: /mnt/media/Video/)
#   REMOTE - rsync remote folder (default: sync:/ - ie uses ~/.ssh/config)
#   RECV_SPEED - rsync speed for receive in kBps (default: 250)
#   SEND_SPEED - rsync speed for send in kBps (default: 250)
#   LOG - sync log location (default: ~/media-sync.log)
#   ALT_REMOTE - remote to use with "alt" option (default: 127.0.0.1::Videos/)
#   RSYNC_FILTERS - rsync filter option (default: --exclude=.*)
#   TIMEOUT - rsync timeout in secs (default: 300)
#
# Required commands (config override in parens):
#   rsync (RSYNC), pkill (PKILL), pgrep (PGREP)
#
# Required if run as root: setpriv or su
#

err() {
  echo >&2 "$*"
}
fatal() {
  err "$*"
  exit 1
}

LOCAL_USER=${LOCAL_USER:-media}

CONFIG="/etc/media-sync.conf"
[[ -r ~/.media-sync.conf ]] && CONFIG=~/.media-sync.conf
[[ -r ${CONFIG} ]] && {
  TMPVAL=$(grep "^LOCAL_USER=[a-zA-Z][a-zA-Z0-9]*$" "${CONFIG}" | head -1)
  TMPVAL=${TMPVAL##*=}; [[ ${TMPVAL} ]] && LOCAL_USER=${TMPVAL}
}

[[ ${LOCAL_USER} ]] || fatal "Invalid LOCAL_USER ${LOCAL_USER}"

if [[ ${EUID} == 0 ]]; then
  # dirname/realpath not available everywhere...
  src=${BASH_SOURCE[0]} basen=${src##*/} rpath=${src%${basen}}
  [[ ${rpath} ]] && rpath=$(cd "${rpath}" &>/dev/null && pwd -P)
  [[ ${rpath} ]] || fatal "Unable to find real script path!"
  rpath="${rpath}/${basen}"
  if command &>/dev/null -v setpriv; then
    gid=$(id -rg 2>/dev/null "${LOCAL_USER}")
    [[ ${gid} ]] || fatal "Unknown local user ${LOCAL_USER}"
    exec setpriv --reset-env --no-new-privs --reuid="${LOCAL_USER}" --regid="${gid}" --init-groups "${rpath}" "$@"
  else
    exec su -s /bin/bash -c "$(printf "%q " "${rpath}" "$@")" "${LOCAL_USER}"
  fi
fi

# some reasonable defaults
LOG=~/media-sync.log

# local directory/user to sync
LOCAL_DIR="/mnt/media/Video/"
RSYNC_FILTERS="--exclude=.*"

# alternate remote
ALT_REMOTE=127.0.0.1::Video/

# remote destination
REMOTE="sync:/"

# bandwidth in kBps (bytes!)
RECV_SPEED=250
SEND_SPEED=250

# timeout in seconds
TIMEOUT=300

PKILL=$(command -v pkill)
PGREP=$(command -v pgrep)
RSYNC=$(command -v rsync)

# local all overrides
# shellcheck disable=SC1090
[ -r "${CONFIG}" ] && . "${CONFIG}"

log() {
  # date similar to rsync log date
  if [[ ${LOG} ]]; then
     echo "$(date "+%Y/%m/%d %H:%M:%S"): $*" >> "${LOG}"
  else
     echo "$(date "+%Y/%m/%d %H:%M:%S"): $*"
  fi
  return 0
}

loge() {
  log "$*"; exit 2
}

[[ -x ${PKILL} ]] || loge "Unable to find pkill (set PKILL config)"
[[ -x ${PGREP} ]] || loge "Unable to find pgrep (set PGREP config)"
[[ -x ${RSYNC} ]] || loge "Unable to find rsync (set RSYNC config)"

usage () {
  echo "Usage: ${0##*/} [<options>]"
  echo "Receive files into local directory ${LOCAL_DIR}"
  echo "  from remote location ${REMOTE} as local user ${LOCAL_USER}"
  echo "<options> can be one or more of:"
  echo "  status - display if sync is running"
  echo "  test - only show what will be synced"
  echo "  cancel - cancel any running sync"
  echo "  delete - perform deletes (local, and if send, remote)"
  echo "  verbose - show rsync debug info"
  echo "  progress - show progress during transfers"
  echo "  alt - use alternate remote: $ALT_REMOTE"
  echo "  send - send files to remote rather that receiving"
  echo "  fast - disable bandwidth limits"
  echo "     (current: ${RECV_SPEED}kBps receive, ${SEND_SPEED}kBps send)"
}

cancel='' send='' test='' args="$*"

rsync_args=("-rltuHO")

for f in "$@"; do
  case $f in
    status|test)
      test=1 LOG='' rsync_args+=("-n")
      [[ $f == status ]] && cancel=1
      ;;
    delete) rsync_args+=("--delete-during") ;;
    verbose) LOG='' ;;
    progress) LOG='' rsync_args+=("--progress" "--stats") ;;
    alt) REMOTE=${ALT_REMOTE} ;;
    fast) RECV_SPEED='' SEND_SPEED='' ;;
    send) send=1 rsync_args+=("-u") ;;
    cancel) cancel=1 ;;
    help) usage; exit 0 ;;
    *) err "Unknown option: '${f}'"; usage; exit 1 ;;
  esac
  shift
done

[[ ${USER} != "${LOCAL_USER}" ]] && {
  ID=$(id)
  ID=${ID%% *}
  [[ ${ID} =~ [\(]([^\)]+)[\)] ]] && USER=${BASH_REMATCH[1]}
}

[[ ${USER} != "${LOCAL_USER}" ]] && {
  # cancel+test = status, anyone can run
  [[ ${cancel} && ${test} ]] || fatal "Run as user ${LOCAL_USER} or root"
}

if [[ ${cancel} ]]; then
  if [[ ${test} ]]; then
    # get status
    "${PGREP}" >/dev/null -u "${LOCAL_USER}" rsync
    rc=$? status=''; [[ ${rc} != 0 ]] && status="not "
    echo "media-sync is ${status}running"
    exit ${rc}
  fi
  # graceful kill
  "${PKILL}" -USR1 -u "${LOCAL_USER}" rsync
  exit 0
fi

# add common args
for f in ${RSYNC_FILTERS}; do rsync_args+=("${f}"); done
rsync_args+=("--safe-links" "--chmod=Da=rwX,Fa=rw" "--timeout=${TIMEOUT:-300}")
rsync_args+=("--out-format=%t %i %n")

log "start: $args"

"$PKILL" -0 -u "${LOCAL_USER}" rsync && {
  log "still running..."
  exit 0
}

[[ -d ${LOCAL_DIR} ]] || {
  loge "Unable to find local directory: '${LOCAL_DIR}'"; }

if [[ ${send} ]]; then

  [[ ${SEND_SPEED} ]] && rsync_args+=("--bwlimit=${SEND_SPEED}")

  # sending to remote
  log "send: ${rsync_args[*]} ${LOCAL_DIR} ${REMOTE}"
  if [[ ${LOG} ]]; then
    "${RSYNC}" "${rsync_args[@]}" "${LOCAL_DIR}" "${REMOTE}" >> "${LOG}" 2>&1 &
  else
    "${RSYNC}" "${rsync_args[@]}" "${LOCAL_DIR}" "${REMOTE}" &
  fi
else

  [[ ${RECV_SPEED} ]] && rsync_args+=("--bwlimit=${RECV_SPEED}")

  # receiving
  log "recv: ${rsync_args[*]} ${REMOTE} ${LOCAL_DIR}"
  if [ -n "$LOG" ]; then
    "${RSYNC}" "${rsync_args[@]}" "${REMOTE}" "${LOCAL_DIR}" >> "${LOG}" 2>&1 &
  else
    "${RSYNC}" "${rsync_args[@]}" "${REMOTE}" "${LOCAL_DIR}" &
  fi
fi

function cancel() {
  # kill rsync cleanly
  kill -USR1 %
}

# trap some signals
trap cancel HUP INT PIPE TERM
wait % 2>/dev/null
rc=$?
trap - HUP INT PIPE TERM
wait % 2>/dev/null
[[ ${rc} != 0 ]] && loge "error: ${rc}"

log "finish"
exit 0
