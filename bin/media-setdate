#!/usr/bin/env bash
# -*- mode:sh; sh-indentation:2 -*- vim:set ft=sh et sw=2 ts=2:
#
# media-setdate v0.7 - Attempts to repair file modified-date based on exif
#
# Author: Scott Shambarger <devel@shambarger.net>
# Copyright (C) 2019-22 Scott Shambarger
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Requires: Bash 4+
#
# PROBLEM TO SOLVE
#
# The program attempts to set the file modified time to match
# the media modification time stored in the EXIF tags.  The correction
# is necessary if the files were copied (rather than moved) and the original
# modification time changed.
#
# Extracting the "Modified" time is academic if the full time + timezone
# is available in the tags, but older EXIF standards (<231) failed
# to include TZ values or offsets, and so only include "localtime"
# without any hints at where "local" is.
#
# Luckily, if the "Captured" date and the "Modified" date are the same,
# the GPS location tags may be used to locate the "local" timezone the
# media was created in. Resolving the GPS location to TZ requires use
# of a docker container with the mapping library (which must be started
# independently).
#
# NOTE: If the file was modified at a different time (eg edited), the
# GPS tags may not represent the timezone.
#
# If the container is not available (or location missing), the GPSDate/Time
# tag (if present) may be used to guess the timezone.
# GPS timestamps are in UTC; however, these timestamps can sometimes be
# incorrect as the precise GPS data may not have been available when
# the media was captured.  In those cases, the program attempts to
# use a "fudge factor" (small offset) to guess which timezone the
# "local" time refers to, and if enough files taken in approximate the
# same area are available, a selection of possible matching timezones
# can be found.  One of these timezones can then be used to convert
# the precise "localtime" modification to the correct UTC time, and
# used to update the file modification time.
#
# Timezones are used in place of UTC-offsets as they can correctly
# handle the daylight savings offsets of the "localtime"
#
# This program runs in two modes: GUESS and UPDATE
#
# GUESS MODE
#
# Guess mode must be run on a group of files that were taken at the
# same general timezone area.
#
# It walks all candidate files and reads EXIF tags looking for precise
# modification times, and failing that, the GPS location or timestamp.
# If the GPS tags are required (and available), the location-mapped or
# offset-guessed timezones are calculated.  Candiate timezones are then
# listed with the percent of files they were guessed from.
#
# GUESS mode can be run with a candidate "default" timezone, and will
# show the offsets between the "Capture" and GPS time based on
# that timezone (to check if the timezone appears correct).
#
# UPDATE MODE
#
# Updates the file modification times based on precise modification tags,
# using GPS -> TZ mapping (requires the GPS->TZ container), or using
# a default timezone from the "GUESS" mode above otherwise.
#
# EXIF TAGS USED:
#   Composite: SubSecModifyDate - full file create time (used if present)
#   Composite: SubSecDateTimeOriginal - used if no ModifyDate present
#   Composite: SubSecCreateDate - same, but SubSecDTOriginal also missing
#   Composite: GPSDateTime - approx original capture time (UTC)
#   Composite: GPSLongitude + GPSLatitude - location at capture (used GPS->TZ)
#   EXIF: ModifyDate - date file created
#   EXIF: OffsetTime - TZ offset of ModifyDate (EXIF >= 0231) (*)
#   EXIF: DateTimeOriginal - date original created (to compare with GPS time)
#   EXIF: CreateDate - date original digitized (used if no DateTimeOriginal)
#   EXIF: GPSDateStamp + GPSTimeStamp - approx original capture (UTC) (*)
# * - these items aren't used directly, as they will be in Composite

# GPS to TZ article:
#   https://stackoverflow.com/questions/16086962/how-to-get-a-time-zone-from-a-location-using-latitude-and-longitude-coordinates
# Node-JS Source:
#   https://github.com/evansiroky/node-geo-tz
# Container start:
#   docker run -d -p 3000:80 --rm tobias74/timezone-lookup:latest
# GPS URL:
#   curl "http://localhost:3000/timezone?latitude=12&longitude=34"

# this format should be accepted by unix "date -d"
DATE_FMT="%Y/%m/%d %H:%M:%S"
# this should be format accepted by GPS -> TZ system
GPS_COORD="%+.6f"
USE_GPS=1
GPS_URL_FMT="http://localhost:3000/timezone?latitude=%s&longitude=%s"

log() { echo "$*"; }
err() { echo >&2 "$*"; }
fatal() { err "$*"; exit 1; }
req_exe() { command -v "$*" >/dev/null || fatal "Where is '$*'?"; }

# validates Bash 4+
(( ${BASH_VERSINFO[0]} >= 4 )) || fatal "Bash v4+ required!"

# max secs that gps and create-date can differ to consider them for comparison
FUDGE_SECS=${FUDGE_SECS:-300}
EXIFTOOL=${EXIFTOOL:-exiftool}
FIX_SECS=60

usage() {
  local prog=${0##*/}
  echo "Usage: $prog [<options>] -g [-z TimeZone] <file>..."
  echo "Usage: $prog [<options>] -z TimeZone <file>..."
  echo "  -z TimeZone is used as default timezone when file TZ unknown"
  echo "  <options>:"
  echo "    -h - print help"
  echo "    -n - dry run (modify-time not changed)"
  echo "    -c - disable use of GPS->TZ URL (see below)"
  echo "    -v - verbose output (repeatable)"
  echo "    -f - force setting date (otherwise < ${FIX_SECS}s skipped)"
  echo "    -l <file> - only process files newer than <file> (modify-time)"
  echo "Overrides: EXIFTOOL='$EXIFTOOL' FUDGE_SECS=$FUDGE_SECS"
  echo ""
  echo "To start GPS->TZ container, URL is http://localhost:3000"
  echo "  docker run -d -p 3000:80 --rm tobias74/timezone-lookup:latest"
  exit
}

verbose() {
  [[ $VERBOSE ]] && log "$*"
}
verbose2() {
  [[ $VERBOSE ]] && (( VERBOSE > 1 )) && log "$*"
}

cmdecho() {
  verbose2 "  $*"
}

TEST=
GUESS=
VERBOSE=0
OLDEST=
DEF_TZ=

# parse args
while getopts "cfghl:nvz:" ARG; do
  case $ARG in
    c) USE_GPS=;;
    f) FIX_SECS=1;;
    g) GUESS=1;;
    h) usage;;
    n) TEST=cmdecho;;
    v) (( VERBOSE++ )) || :;;
    l) [[ $OLDEST ]] && usage
       OLDEST=$OPTARG;;
    z) [[ $DEF_TZ ]] && usage
       [[ -d /usr/share/zoneinfo ]] && {
         [[ -f /usr/share/zoneinfo/$OPTARG ]] || \
           fatal "$OPTARG not found in /usr/share/zoneinfo"
       }
       DEF_TZ=$OPTARG;;
    *) usage;;
  esac
done
shift $(( OPTIND - 1 ))

[[ $VERBOSE == 0 ]] && VERBOSE=

[[ $1 ]] || usage

[[ $OLDEST && ! -f $OLDEST ]] && fatal "\"newer-than\" file '$OLDEST' missing!"

req_exe "$EXIFTOOL"

# echo offset (in 15min intervals)
calc_offset() {
  # <orig> <gps>
  local orig=$1 gps=$2 adj abs

  # check if we can trust the GPS date for ref... FUDGE_SECS max offset
  (( adj = (orig - gps) % 900, abs = adj > 0 ? adj : -adj )) || :
  (( abs < FUDGE_SECS || abs > (900 - FUDGE_SECS) )) || return 0
  # calc offset rounding up/down if required
  echo $(( (orig - gps) / 900 + ((abs > (900 - FUDGE_SECS)) \
                                   ? ((adj < 0) ? -1 : 1) : 0) ))
}

unix_to_date_str() {
  # <unix-time> [<fmt>] - echo date in <fmt> (or default)
  local _fmt=$2
  [[ $_fmt ]] || _fmt=$DATE_FMT
  if [[ $DARWIN ]]; then
    date -r $1 "+$_fmt" || return
  else
    date -d @$1 "+$_fmt" || return
  fi
  return 0
}

date_str_to_unix() {
  # <ret> <tz> <date> (YYYY/MM/DD HH:MM:SS) - echo unix-secs
  local _r
  if [[ $DARWIN ]]; then
    _r=$(TZ=$2 date -j -f "$DATE_FMT" "$3" "+%s") || return
  else
    _r=$(TZ=$2 date -d "$3" "+%s") || return
  fi
  printf -v "$1" '%s' "$_r"
}

declare -A VZONES=([0]="UNSET")

load_vzones() {
  VZONES=()
  # load zones recognized on local system
  local -a azones
  while read -a azones; do
    [[ -d /usr/share/zoneinfo && \
         ! -f /usr/share/zoneinfo/${azones[0]} ]] && continue
    VZONES[${azones[0]}]="${azones[1]};${azones[2]}"
  done << "EOF"
Africa/Abidjan +00:00 +00:00
Africa/Accra +00:00 +00:00
Africa/Algiers +01:00 +01:00
Africa/Bissau +00:00 +00:00
Africa/Cairo +02:00 +02:00
Africa/Casablanca +01:00 +01:00
Africa/Ceuta +01:00 +02:00
Africa/El_Aaiun +00:00 +01:00
Africa/Johannesburg +02:00 +02:00
Africa/Juba +03:00 +03:00
Africa/Khartoum +02:00 +02:00
Africa/Lagos +01:00 +01:00
Africa/Maputo +02:00 +02:00
Africa/Monrovia +00:00 +00:00
Africa/Nairobi +03:00 +03:00
Africa/Ndjamena +01:00 +01:00
Africa/Tripoli +02:00 +02:00
Africa/Tunis +01:00 +01:00
Africa/Windhoek +02:00 +02:00
America/Adak -10:00 -09:00
America/Anchorage -09:00 -08:00
America/Araguaina -03:00 -03:00
America/Argentina/Buenos_Aires -03:00 -03:00
America/Argentina/Catamarca -03:00 -03:00
America/Argentina/Cordoba -03:00 -03:00
America/Argentina/Jujuy -03:00 -03:00
America/Argentina/La_Rioja -03:00 -03:00
America/Argentina/Mendoza -03:00 -03:00
America/Argentina/Rio_Gallegos -03:00 -03:00
America/Argentina/Salta -03:00 -03:00
America/Argentina/San_Juan -03:00 -03:00
America/Argentina/San_Luis -03:00 -03:00
America/Argentina/Tucuman -03:00 -03:00
America/Argentina/Ushuaia -03:00 -03:00
America/Asuncion -04:00 -03:00
America/Atikokan -05:00 -05:00
America/Bahia -03:00 -03:00
America/Bahia_Banderas -06:00 -05:00
America/Barbados -04:00 -04:00
America/Belem -03:00 -03:00
America/Belize -06:00 -06:00
America/Blanc-Sablon -04:00 -04:00
America/Boa_Vista -04:00 -04:00
America/Bogota -05:00 -05:00
America/Boise -07:00 -06:00
America/Cambridge_Bay -07:00 -06:00
America/Campo_Grande -04:00 -03:00
America/Cancun -05:00 -05:00
America/Caracas -04:00 -04:00
America/Cayenne -03:00 -03:00
America/Chicago -06:00 -05:00
America/Chihuahua -07:00 -06:00
America/Costa_Rica -06:00 -06:00
America/Creston -07:00 -07:00
America/Cuiaba -04:00 -03:00
America/Curacao -04:00 -04:00
America/Danmarkshavn +00:00 +00:00
America/Dawson -08:00 -07:00
America/Dawson_Creek -07:00 -07:00
America/Denver -07:00 -06:00
America/Detroit -05:00 -04:00
America/Edmonton -07:00 -06:00
America/Eirunepe -05:00 -05:00
America/El_Salvador -06:00 -06:00
America/Fort_Nelson -07:00 -07:00
America/Fortaleza -03:00 -03:00
America/Glace_Bay -04:00 -03:00
America/Godthab -03:00 -02:00
America/Goose_Bay -04:00 -03:00
America/Grand_Turk -05:00 -04:00
America/Guatemala -06:00 -06:00
America/Guayaquil -05:00 -05:00
America/Guyana -04:00 -04:00
America/Halifax -04:00 -03:00
America/Havana -05:00 -04:00
America/Hermosillo -07:00 -07:00
America/Indiana/Indianapolis -05:00 -04:00
America/Indiana/Knox -06:00 -05:00
America/Indiana/Marengo -05:00 -04:00
America/Indiana/Petersburg -05:00 -04:00
America/Indiana/Tell_City -06:00 -05:00
America/Indiana/Vevay -05:00 -04:00
America/Indiana/Vincennes -05:00 -04:00
America/Indiana/Winamac -05:00 -04:00
America/Inuvik -07:00 -06:00
America/Iqaluit -05:00 -04:00
America/Jamaica -05:00 -05:00
America/Juneau -09:00 -08:00
America/Kentucky/Louisville -05:00 -04:00
America/Kentucky/Monticello -05:00 -04:00
America/La_Paz -04:00 -04:00
America/Lima -05:00 -05:00
America/Los_Angeles -08:00 -07:00
America/Maceio -03:00 -03:00
America/Managua -06:00 -06:00
America/Manaus -04:00 -04:00
America/Martinique -04:00 -04:00
America/Matamoros -06:00 -05:00
America/Mazatlan -07:00 -06:00
America/Menominee -06:00 -05:00
America/Merida -06:00 -05:00
America/Metlakatla -09:00 -08:00
America/Mexico_City -06:00 -05:00
America/Miquelon -03:00 -02:00
America/Moncton -04:00 -03:00
America/Monterrey -06:00 -05:00
America/Montevideo -03:00 -03:00
America/Nassau -05:00 -04:00
America/New_York -05:00 -04:00
America/Nipigon -05:00 -04:00
America/Nome -09:00 -08:00
America/Noronha -02:00 -02:00
America/North_Dakota/Beulah -06:00 -05:00
America/North_Dakota/Center -06:00 -05:00
America/North_Dakota/New_Salem -06:00 -05:00
America/Ojinaga -07:00 -06:00
America/Panama -05:00 -05:00
America/Pangnirtung -05:00 -04:00
America/Paramaribo -03:00 -03:00
America/Phoenix -07:00 -07:00
America/Port_of_Spain -04:00 -04:00
America/Port-au-Prince -05:00 -04:00
America/Porto_Velho -04:00 -04:00
America/Puerto_Rico -04:00 -04:00
America/Punta_Arenas -03:00 -03:00
America/Rainy_River -06:00 -05:00
America/Rankin_Inlet -06:00 -05:00
America/Recife -03:00 -03:00
America/Regina -06:00 -06:00
America/Resolute -06:00 -05:00
America/Rio_Branco -05:00 -05:00
America/Santarem -03:00 -03:00
America/Santiago -04:00 -03:00
America/Santo_Domingo -04:00 -04:00
America/Sao_Paulo -03:00 -02:00
America/Scoresbysund -01:00 +00:00
America/Sitka -09:00 -08:00
America/St_Johns -03:30 -02:30
America/Swift_Current -06:00 -06:00
America/Tegucigalpa -06:00 -06:00
America/Thule -04:00 -03:00
America/Thunder_Bay -05:00 -04:00
America/Tijuana -08:00 -07:00
America/Toronto -05:00 -04:00
America/Vancouver -08:00 -07:00
America/Whitehorse -08:00 -07:00
America/Winnipeg -06:00 -05:00
America/Yakutat -09:00 -08:00
America/Yellowknife -07:00 -06:00
Antarctica/Casey +11:00 +11:00
Antarctica/Davis +07:00 +07:00
Antarctica/DumontDUrville +10:00 +10:00
Antarctica/Macquarie +11:00 +11:00
Antarctica/Mawson +05:00 +05:00
Antarctica/Palmer -03:00 -03:00
Antarctica/Rothera -03:00 -03:00
Antarctica/Syowa +03:00 +03:00
Antarctica/Troll +00:00 +02:00
Antarctica/Vostok +06:00 +06:00
Asia/Almaty +06:00 +06:00
Asia/Amman +02:00 +03:00
Asia/Anadyr +12:00 +12:00
Asia/Aqtau +05:00 +05:00
Asia/Aqtobe +05:00 +05:00
Asia/Ashgabat +05:00 +05:00
Asia/Atyrau +05:00 +05:00
Asia/Baghdad +03:00 +03:00
Asia/Baku +04:00 +04:00
Asia/Bangkok +07:00 +07:00
Asia/Barnaul +07:00 +07:00
Asia/Beirut +02:00 +03:00
Asia/Bishkek +06:00 +06:00
Asia/Brunei +08:00 +08:00
Asia/Chita +09:00 +09:00
Asia/Choibalsan +08:00 +08:00
Asia/Colombo +05:30 +05:30
Asia/Damascus +02:00 +03:00
Asia/Dhaka +06:00 +06:00
Asia/Dili +09:00 +09:00
Asia/Dubai +04:00 +04:00
Asia/Dushanbe +05:00 +05:00
Asia/Famagusta +02:00 +02:00
Asia/Gaza +02:00 +03:00
Asia/Hebron +02:00 +03:00
Asia/Ho_Chi_Minh +07:00 +07:00
Asia/Hong_Kong +08:00 +08:00
Asia/Hovd +07:00 +07:00
Asia/Irkutsk +08:00 +08:00
Asia/Jakarta +07:00 +07:00
Asia/Jayapura +09:00 +09:00
Asia/Jerusalem +02:00 +03:00
Asia/Kabul +04:30 +04:30
Asia/Kamchatka +12:00 +12:00
Asia/Karachi +05:00 +05:00
Asia/Kathmandu +05:45 +05:45
Asia/Khandyga +09:00 +09:00
Asia/Kolkata +05:30 +05:30
Asia/Krasnoyarsk +07:00 +07:00
Asia/Kuala_Lumpur +08:00 +08:00
Asia/Kuching +08:00 +08:00
Asia/Macau +08:00 +08:00
Asia/Magadan +11:00 +11:00
Asia/Makassar +08:00 +08:00
Asia/Manila +08:00 +08:00
Asia/Novokuznetsk +07:00 +07:00
Asia/Novosibirsk +07:00 +07:00
Asia/Omsk +06:00 +06:00
Asia/Oral +05:00 +05:00
Asia/Pontianak +07:00 +07:00
Asia/Pyongyang +09:00 +09:00
Asia/Qatar +03:00 +03:00
Asia/Qyzylorda +05:00 +05:00
Asia/Riyadh +03:00 +03:00
Asia/Sakhalin +11:00 +11:00
Asia/Samarkand +05:00 +05:00
Asia/Seoul +09:00 +09:00
Asia/Shanghai +08:00 +08:00
Asia/Singapore +08:00 +08:00
Asia/Srednekolymsk +11:00 +11:00
Asia/Taipei +08:00 +08:00
Asia/Tashkent +05:00 +05:00
Asia/Tbilisi +04:00 +04:00
Asia/Tehran +03:30 +04:30
Asia/Thimphu +06:00 +06:00
Asia/Tokyo +09:00 +09:00
Asia/Tomsk +07:00 +07:00
Asia/Ulaanbaatar +08:00 +08:00
Asia/Urumqi +06:00 +06:00
Asia/Ust-Nera +10:00 +10:00
Asia/Vladivostok +10:00 +10:00
Asia/Yakutsk +09:00 +09:00
Asia/Yangon +06:30 +06:30
Asia/Yekaterinburg +05:00 +05:00
Asia/Yerevan +04:00 +04:00
Atlantic/Azores -01:00 +00:00
Atlantic/Bermuda -04:00 -03:00
Atlantic/Canary +00:00 +01:00
Atlantic/Cape_Verde -01:00 -01:00
Atlantic/Faroe +00:00 +01:00
Atlantic/Madeira +00:00 +01:00
Atlantic/Reykjavik +00:00 +00:00
Atlantic/South_Georgia -02:00 -02:00
Atlantic/Stanley -03:00 -03:00
Australia/Adelaide +09:30 +10:30
Australia/Brisbane +10:00 +10:00
Australia/Broken_Hill +09:30 +10:30
Australia/Currie +10:00 +11:00
Australia/Darwin +09:30 +09:30
Australia/Eucla +08:45 +08:45
Australia/Hobart +10:00 +11:00
Australia/Lindeman +10:00 +10:00
Australia/Lord_Howe +10:30 +11:00
Australia/Melbourne +10:00 +11:00
Australia/Perth +08:00 +08:00
Australia/Sydney +10:00 +11:00
Etc/GMT +00:00 +00:00
Etc/GMT+1 -01:00 -01:00
Etc/GMT+10 -10:00 -10:00
Etc/GMT+11 -11:00 -11:00
Etc/GMT+12 -12:00 -12:00
Etc/GMT+2 -02:00 -02:00
Etc/GMT+3 -03:00 -03:00
Etc/GMT+4 -04:00 -04:00
Etc/GMT+5 -05:00 -05:00
Etc/GMT+6 -06:00 -06:00
Etc/GMT+7 -07:00 -07:00
Etc/GMT+8 -08:00 -08:00
Etc/GMT+9 -09:00 -09:00
Etc/GMT-1 +01:00 +01:00
Etc/GMT-10 +10:00 +10:00
Etc/GMT-11 +11:00 +11:00
Etc/GMT-12 +12:00 +12:00
Etc/GMT-13 +13:00 +13:00
Etc/GMT-14 +14:00 +14:00
Etc/GMT-2 +02:00 +02:00
Etc/GMT-3 +03:00 +03:00
Etc/GMT-4 +04:00 +04:00
Etc/GMT-5 +05:00 +05:00
Etc/GMT-6 +06:00 +06:00
Etc/GMT-7 +07:00 +07:00
Etc/GMT-8 +08:00 +08:00
Etc/GMT-9 +09:00 +09:00
Etc/UTC +00:00 +00:00
Europe/Amsterdam +01:00 +02:00
Europe/Andorra +01:00 +02:00
Europe/Astrakhan +04:00 +04:00
Europe/Athens +02:00 +03:00
Europe/Belgrade +01:00 +02:00
Europe/Berlin +01:00 +02:00
Europe/Brussels +01:00 +02:00
Europe/Bucharest +02:00 +03:00
Europe/Budapest +01:00 +02:00
Europe/Chisinau +02:00 +03:00
Europe/Copenhagen +01:00 +02:00
Europe/Dublin +00:00 +01:00
Europe/Gibraltar +01:00 +02:00
Europe/Helsinki +02:00 +03:00
Europe/Istanbul +03:00 +03:00
Europe/Kaliningrad +02:00 +02:00
Europe/Kiev +02:00 +03:00
Europe/Kirov +03:00 +03:00
Europe/Lisbon +00:00 +01:00
Europe/London +00:00 +01:00
Europe/Luxembourg +01:00 +02:00
Europe/Madrid +01:00 +02:00
Europe/Malta +01:00 +02:00
Europe/Minsk +03:00 +03:00
Europe/Monaco +01:00 +02:00
Europe/Moscow +03:00 +03:00
Asia/Nicosia +02:00 +03:00
Europe/Oslo +01:00 +02:00
Europe/Paris +01:00 +02:00
Europe/Prague +01:00 +02:00
Europe/Riga +02:00 +03:00
Europe/Rome +01:00 +02:00
Europe/Samara +04:00 +04:00
Europe/Saratov +04:00 +04:00
Europe/Simferopol +03:00 +03:00
Europe/Sofia +02:00 +03:00
Europe/Stockholm +01:00 +02:00
Europe/Tallinn +02:00 +03:00
Europe/Tirane +01:00 +02:00
Europe/Ulyanovsk +04:00 +04:00
Europe/Uzhgorod +02:00 +03:00
Europe/Vienna +01:00 +02:00
Europe/Vilnius +02:00 +03:00
Europe/Volgograd +04:00 +04:00
Europe/Warsaw +01:00 +02:00
Europe/Zaporozhye +02:00 +03:00
Europe/Zurich +01:00 +02:00
Indian/Chagos +06:00 +06:00
Indian/Christmas +07:00 +07:00
Indian/Cocos +06:30 +06:30
Indian/Kerguelen +05:00 +05:00
Indian/Mahe +04:00 +04:00
Indian/Maldives +05:00 +05:00
Indian/Mauritius +04:00 +04:00
Indian/Reunion +04:00 +04:00
Pacific/Apia +13:00 +14:00
Pacific/Auckland +12:00 +13:00
Pacific/Bougainville +11:00 +11:00
Pacific/Chatham +12:45 +13:45
Pacific/Chuuk +10:00 +10:00
Pacific/Easter -06:00 -05:00
Pacific/Efate +11:00 +11:00
Pacific/Enderbury +13:00 +13:00
Pacific/Fakaofo +13:00 +13:00
Pacific/Fiji +12:00 +13:00
Pacific/Funafuti +12:00 +12:00
Pacific/Galapagos -06:00 -06:00
Pacific/Gambier -09:00 -09:00
Pacific/Guadalcanal +11:00 +11:00
Pacific/Guam +10:00 +10:00
Pacific/Honolulu -10:00 -10:00
Pacific/Kiritimati +14:00 +14:00
Pacific/Kosrae +11:00 +11:00
Pacific/Kwajalein +12:00 +12:00
Pacific/Majuro +12:00 +12:00
Pacific/Marquesas -09:30 -09:30
Pacific/Nauru +12:00 +12:00
Pacific/Niue -11:00 -11:00
Pacific/Norfolk +11:00 +11:00
Pacific/Noumea +11:00 +11:00
Pacific/Pago_Pago -11:00 -11:00
Pacific/Palau +09:00 +09:00
Pacific/Pitcairn -08:00 -08:00
Pacific/Pohnpei +11:00 +11:00
Pacific/Port_Moresby +10:00 +10:00
Pacific/Rarotonga -10:00 -10:00
Pacific/Tahiti -10:00 -10:00
Pacific/Tarawa +12:00 +12:00
Pacific/Tongatapu +13:00 +14:00
Pacific/Wake +12:00 +12:00
Pacific/Wallis +12:00 +12:00
EOF
  return 0
}

# based on offsets for each TZ, echo likely candidates
suggest_zones() {
  # <orig(DATE_FMT)> <gps-time(unix-secs)>
  local zdate zoff
  date_str_to_unix zdate UTC "$1" || return
  local offset=$(calc_offset "$zdate" "$2")

  # round values to hours
  printf -v zoff "%+03d:%02d" "$(( offset / 4 ))" \
         "$(( ((offset<0)?-offset:offset) % 4 ))"
  [[ ${VZONES[0]} == "UNSET" ]] && load_vzones
  local z v
  for z in ${!VZONES[*]}; do
    v=${VZONES[$z]}
    [[ ${v#*;} == $zoff || ${v%;*} == $zoff ]] && echo -n "$z "
  done
  echo
}

get_mtime() {
  # <ret> <file> - echo modified time in unix-time
  local _r
  if [[ $DARWIN ]]; then
    _r=$(stat -f "%m" "$2") || _r=
  else
    _r=$(stat -c "%Y" "$2") || _r=
  fi
  printf -v "$1" '%s' "$_r"
}

# sets assoc array $ftags[] with file tags, also adds:
#  ModifyUnix - modification time in unix-time (if present)
#  ModifyTime - modification time in $DATE_FMT (no TZ)
#  CreateTime - preferred creation time in $DATE_FMT (no TZ)
# returns failure if unknown file type or CreateTime missing
ftags_for_file() {
  # <file>
  local file=$1 tags line zoffset
  case ${file,,} in
    *.jpg|*.jpeg|*.png)
      tags="-EXIF:ModifyDate -EXIF:DateTimeOriginal -EXIF:CreateDate"
      tags+=" -Composite:SubSecModifyDate"
      tags+=" -Composite:SubSecDateTimeOriginal"
      tags+=" -Composite:SubSecCreateDate"
      tags+=" -Composite:GPSDateTime"
      tags+=" -Composite:GPSLatitude -Composite:GPSLongitude"
      ;;
    # mp4 is UTC already
    *.mp4|*.mpeg4)
      tags="-Quicktime:ModifyDate -Quicktime:CreateDate"
      zoffset=0
      ;;
    *)
      verbose "skipping $file"
      return 1
      ;;
  esac

  # retrieve values in unix-time and $GPS_COORD
  verbose2 "exiftool tags for $file"
  while read -r line; do
    ftags[${line%: *}]=${line#*: }
    verbose2 "  $line"
  done < <(TZ=UTC "$EXIFTOOL" -s -s -a -d "+%s" -c "$GPS_COORD" $tags "$file")

  [[ ${ftags[@]} ]] || {
    verbose "No EXIF tags in $file"
    return 1
  }

  local cdate mdate
  if [[ $zoffset ]]; then
    # we know the TZ offset, use it
    mdate=${ftags[ModifyDate]}
    cdate=${ftags[CreateDate]}
  else
    mdate=${ftags[SubSecModifyDate]}
    [[ $mdate ]] && zoffset=0
    [[ $mdate ]] || mdate=${ftags[ModifyDate]}
    [[ $mdate ]] || {
      # no ModifyDate! check for accurate Create as fallback
      mdate=${ftags[SubSecDateTimeOriginal]}
      [[ $mdate ]] || mdate=${ftags[SubSecCreateDate]}
      [[ $mdate ]] && zoffset=0
    }

    # CaptureTime only used for GPS guessing if Modify has no TZ
    cdate=${ftags[DateTimeOriginal]}
    [[ $cdate ]] || cdate=${ftags[CreateDate]}
  fi

  # capture falls back to modify if no other values
  [[ $cdate ]] || cdate=$mdate

  [[ $cdate ]] || {
    verbose "No capture or modify date found in $file"
    return 1
  }

  # modify falls back to capture if no other values
  [[ $mdate ]] || mdate=$cdate

  if [[ $zoffset ]]; then
    # if we have this, we don't really need anything else...
    (( ftags[ModifyUnix] = mdate - zoffset ))
    verbose2 " >ModifyUnix: ${ftags[ModifyUnix]}"
    return 0
  fi

  # Use UTC as passed to exiftool to get original EXIF tag value back
  ftags[ModifyTime]=$(TZ=UTC unix_to_date_str $mdate)
  verbose2 " >ModifyTime: ${ftags[ModifyTime]}"

  if [[ $mdate == $cdate ]]; then
    # if Modify == Create, we can try guessing TZ from Create vs GPSTime
    ftags[CreateTime]=$(TZ=UTC unix_to_date_str $cdate)
    verbose2 " >CreateTime: ${ftags[CreateTime]}"
  fi

  return 0
}

gps_loc_to_zone() {
  # <ret>
  printf -v "$1" '%s' "" || return 1
  [[ $USE_GPS && ${ftags[GPSLatitude]} && ${ftags[GPSLongitude]} ]] || return 1

  local _z _u
  printf -v _u "$GPS_URL_FMT" "${ftags[GPSLatitude]}" "${ftags[GPSLongitude]}"
  _z=$(curl -fkLsS -m 3 2>&1 "$_u") || {
    # show reason why GPS mapping failed
    err "GPS location service returned ${_z:-failure}"
    err "Disabling GPS to timezone mapping"
    USE_GPS=
    return 1
  }

  # strip to 1st zone
  [[ $_z ]] && { _z=${_z%%\"\]*}; _z=${_z#*\[\"}; }
  [[ $_z ]] || return 1
  printf -v "$1" '%s' "$_z"
}

file_zones() {
  # <file> - update array $zones[]
  # Based on file extension, compare gps and create-date
  local file=$1
  local -A ftags
  ftags_for_file "$file" || return 0

  if [[ ${ftags[ModifyUnix]} ]]; then
    verbose "File has zone offset: $file"
    (( zones["KNOWN"]++, zfiles++ )) || :
    return 0
  fi

  # check if we can get TZ from GPS location
  local zone def_zone

  if [[ ${ftags[CreateTime]} ]] && gps_loc_to_zone zone; then
    log "GPS TZ ($zone) - $file"
    (( zones["$zone"]++, zfiles++ )) || :
  fi

  # use $DEF_TZ if we don't have any other TZ source
  [[ $zone ]] || { zone=$DEF_TZ; def_zone=1; }

  local zdate gdate gps=${ftags[GPSDateTime]} orig=${ftags[ModifyTime]}

  # with tz, just show origdate to compare with filename
  if [[ $zone ]]; then
    [[ $def_zone ]] && log "Default TZ - $file"
    if [[ $def_zone || $VERBOSE ]] && [[ $gps && ${ftags[CreateTime]} ]]; then
      log "   CreateTime: $orig"
      # show offset of CreateTime vs GPS in $zone
      if date_str_to_unix zdate "$zone" "$orig"; then
        gdate=$(TZ=$zone unix_to_date_str "$gps")
        local offset
        (( gps != zdate )) && (( offset = gps - zdate ))
        [[ $offset ]] && gdate+=" ($offset)"
        log "  GPSTime->TZ: $gdate"
      fi
    fi
  elif [[ $gps && ${ftags[CreateTime]} ]]; then
    # fallback to guessing timezone from GPS time offset
    gdate=$(TZ=UTC unix_to_date_str "$gps")
    verbose "Zone guess: '$orig' vs GPS '$gdate' - $file"

    local -a czones=$(suggest_zones "$orig" "$gps")
    local zdiff
    for zone in ${czones[@]}; do
      date_str_to_unix zdate "$zone" "$orig" || continue
      (( zdiff = (zdate > gps ? (zdate-gps) : (gps-zdate)) )) || :
      (( zdiff < FUDGE_SECS && zones[$zone]++ )) || :
    done
    [[ $zone ]] && { (( zfiles++, ufiles++ )) || :; }
  elif [[ ${ftags[CreateTime]} ]]; then
    verbose "No GPS data - $file"
  else
    verbose "Modify != Create (no GPS guessing) - $file"
  fi

  return 0
}

update_file() {
  # <file>

  # find tags for filetype
  local file=$1
  local -A ftags
  verbose "-> Processing $file"
  ftags_for_file "$file" || return 0

  # check if file "almost" correct....
  local zone mdate def_zone
  if [[ ${ftags[ModifyUnix]} ]]; then
    verbose "File contains accurate ModifyTime"
    mdate=${ftags[ModifyUnix]}
    zone=UTC
  else
    [[ ${ftags[CreateTime]} ]] && gps_loc_to_zone zone
    if [[ $zone ]]; then
      verbose "Using GPS -> TZ ($zone)"
    elif [[ $DEF_TZ ]]; then
      verbose "Using default TZ"
      def_zone=1 zone=$DEF_TZ
    else
      log "No GPS data (and no default TZ), skipping - $file"
      return 0
    fi
    local orig=${ftags[ModifyTime]}
    date_str_to_unix mdate "$zone" "$orig" || {
      err "Date convertion of $orig to $zone failed - $file"
      return 1
    }
  fi

  local forig fdiff
  get_mtime forig "$file"

  (( fdiff = ( forig > mdate ) ? (forig - mdate) : (mdate - forig) ))
  (( fdiff < FIX_SECS )) && {
    verbose "File OK (offset ${fdiff}s)"
    return 0
  }

  # ok update file date
  [[ $def_zone ]] && (( zfiles++ ))
  (( ufiles++ ))
  log "${TEST:+(DRY-RUN) }Fixing: $file"
  log "  New $(TZ=$zone unix_to_date_str $mdate) (TZ:$zone, unix:$mdate)"
  verbose "  Cur $(TZ=$zone unix_to_date_str $forig)"

  local fdate=$(TZ=UTC unix_to_date_str $mdate "%Y%m%d%H%M.%S")
  TZ=UTC $TEST touch -c -t "$fdate" "$file"
  [[ $TEST ]] && return 0

  get_mtime fdate "$file"
  log "  Upd $(TZ=$zone unix_to_date_str $fdate)"
}

process_file() {
  # decide if we're dealing with the file, and how
  local file=$1
  if [[ $OLDEST_TIME ]]; then
    local fmtime
    get_mtime fmtime "$file"
    (( $fmtime <= $OLDEST_TIME )) && {
      verbose "Skipping old file: $file"
      return 0
    }
  fi
  (( files++ ))
  if [[ $GUESS ]]; then
    file_zones "$file"
  else
    update_file "$file"
  fi
  return 0
}

# cache our platform
case $(uname -s) in
  Darwin) DARWIN=1;;
  *) DARWIN=;;
esac

# convert OLDEST to mtime
[[ $OLDEST ]] && get_mtime OLDEST_TIME "$OLDEST"

declare -A zones
files=0 zfiles=0 ufiles=0
for arg in "$@"; do
  if [[ -f $arg ]]; then
    process_file "$arg"
  elif [[ -d $arg ]]; then
    while IFS= read -r -d '' file; do
      process_file "$file"
    done < <(find "$arg" -type f ${OLDEST:+-newer "$OLDEST"} -print0)
  else
    log "Argument '$arg' not found"
  fi
done

if [[ $GUESS ]]; then
  # GUESS MODE
  # now for each offset, display % of files, and likely TZ values
  z=
  for z in "${!zones[@]}"; do
    log "$(( (${zones["$z"]} * 100) / zfiles ))% $z ($(( (${zones["$z"]} * 100) / files ))% total)"
  done
  [[ $DEF_TZ ]] && exit 0
  if (( ufiles > 0 )); then
    log "You can re-try guess with -z <zone> to see dates that would be set"
  elif [[ -z $z ]]; then
    log "No files with GPS data found!"
  fi
else
  log "Processed $files files"
  log "${TEST:+(DRY-RUN) }Fixed $ufiles files${DEF_TZ:+ ($zfiles using default timezone)}"
fi

exit 0
