#!/usr/bin/env bash
# -*- mode: shell-script; fill-column: 78 -*-
#
# ssltest v0.1 SSL Cipher Test using OpenSSL
# Author: Scott Shambarger <devel@shambarger.net>
#
# Copyright 2019 Scott Shambarger.  All rights reserved.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# default: openssl s_server -cipher "ALL:@SECLEVEL=0"

# OpenSSL requires the port number.
#CIPHERLIST='ALL:@STRENGTH:!PSK:!ECDSA:!DSS:!SRP'
CIPHERLIST='ALL:@STRENGTH:!PSK:!DSS:!SRP'
#CIPHERLIST='aNULL'
DEFDELAY=1

usage() {
  echo "usage: $0 [ -{012} ] [ -l | -i | -m ] [ <host:port> [ <s_client options> ] ]"
  echo "  default host:port is localhost:4433 (openssl s_client)"
  echo "  -0 - use <=tlsv1.0"
  echo "  -1 - use <=tlsv1.1"
  echo "  -2 - use <=tlsv1.2"
  echo "  -m - starttls smtp (port 25)"
  echo "  -i - starttls imap (port 143)"
  echo "  -p - look for preferred only"
  echo "  -l - list cipherlist tested"
  echo "  -s - sleep $DEFDELAY between connections"
  exit 0
}

[ -z "$(command -v openssl)" ] && echo "Unable to find openssl executable" && exit 1
[[ $(openssl version) =~ OpenSSL ]] || { echo "Script only works with OpenSSL"; exit 1; }

LVLOPT=
list=
pref_only=
while getopts ":012ilmps" arg; do
  case $arg in
    0)
      [ -n "$LVLOPT" ] && usage
      echo "Using <= TLSv1"
      LVLOPT="-tls1"
      ;;
    1)
      [ -n "$LVLOPT" ] && usage
      echo "Using <= TLSv1.1"
      LVLOPT="-tls1_1"
      ;;
    2)
      [ -n "$LVLOPT" ] && usage
      echo "Using <= TLSv1.2"
      LVLOPT="-tls1_2"
      ;;
    i)
      STARTTLS="-starttls imap";;
    l)
      list=1;;
    m)
      STARTTLS="-starttls smtp";;
    p)
      pref_only=1;;
    s)
      DELAY=$DEFDELAY;;
    *)
      usage;;
  esac
done
shift $((OPTIND-1))

process_dest() { # [ [<hostname>][:<port>] ]
  local port host dest
  if [ -n "$1" ]; then
    dest=$1
    host=${dest%:*}
    [[ $dest =~ : ]] && port=${dest#*:}
  fi

  # setup defaults
  if [ -z "$port" ]; then
    port=4433
    [ "$STARTTLS" = "-starttls smtp" ] && port=25
    [ "$STARTTLS" = "-starttls imap" ] && port=143
  fi
  [ -z "$host" ] && host=localhost
  dest=${host}:$port
  if [ "$port" == "25" -o "$port" == "587" ]; then
    STARTTLS="-starttls smtp"
  fi
  SERVER="-connect $dest"
}

process_dest "$1"
shift
# rest of args are for openssl...

#echo Obtaining cipher list from $(openssl version).
ciphers=
ciphers13=
if [ -z "$pref_only" ]; then
  CLVLOPT=$LVLOPT
  if [ -z "$LVLOPT" ] && openssl ciphers -tls1_3 >/dev/null 2>&1; then
    # tls1.3 supported, need to handle cipher vs ciphersuite args
    CLVLOPT=-tls1_2
    ciphers13=$(openssl ciphers -s "TLS1.3:@SECLEVEL=0" | tr : " ")
  fi
  ciphers=$(openssl ciphers $CLVLOPT -s "${CIPHERLIST}:@SECLEVEL=0" | tr : " ")
fi

test_cipher() { # <cipher> [ <openssl-opts> ]
  local show_cipher CIPHER result
  local cipher=$1
  shift
  [ -n "$list" ] && echo "$cipher" && return
  if [ -z "$cipher" ]; then
    show_cipher=1
  elif [[ $tls13 ]]; then
    CIPHER="-ciphersuites $cipher"
  else
    CIPHER="-cipher $cipher:@SECLEVEL=0"
  fi

  if [ -n "$1" ]; then
    echo openssl s_client $CIPHER $LVLOPT $SERVER $STARTTLS "$@"
    echo ${STARTTLS:+quit} | openssl s_client $CIPHER $LVLOPT $SERVER $STARTTLS "$@" 2>&1
    return
  fi

  printf "%-32s" "$cipher "
  #echo -e "\nopenssl s_client $CIPHER $LVLOPT $SERVER $STARTTLS"
  result=$(echo ${STARTTLS:+quit} | openssl s_client $CIPHER $LVLOPT $SERVER $STARTTLS 2>&1)
  if [[ "$result" =~ ":error:" ]] ; then
    printf "%-10s" "Failed"
    echo "("$(echo -n "$result" | grep ":error:" | cut -d':' -f6)")"
    return
  fi
  if [[ "$result" =~ "Cipher is " ]] ; then
    if [[ $show_cipher ]]; then
      echo -n "$result" | grep "Cipher is " | sed 's/.*Cipher is //'
    else
      echo "Accepted"
    fi
  else
    printf "%-10s\n" "UNKNOWN OUTPUT:"
    echo "$result"
    echo "Possibly new openssl output format?"
    exit 1
  fi
}

tls13=1
for cipher in ${ciphers13[@]}
do
  test_cipher "$cipher" "$@"
  [[ $DELAY ]] && sleep $DELAY
done
tls13=

# <=tls1.2
OLVLOPT=$LVLOPT
[[ $LVLOPT ]] || LVLOPT=-tls1_2
for cipher in ${ciphers[@]}
do
  test_cipher "$cipher" "$@"
  [[ $DELAY ]] && sleep $DELAY
done
LVLOPT=$OLVLOPT

echo -n "Preferred: "
test_cipher "" "$@"

# Local Variables:
# mode: sh
# sh-basic-offset: 2
# sh-indentation: 2
# indent-tabs-mode: nil
# End:
